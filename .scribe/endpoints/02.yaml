name: 'Task Management'
description: |-

  APIs for managing tasks
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/tasks
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'List all tasks'
      description: |-
        Returns a paginated list of the authenticated user's tasks.
        Results can be filtered by status, priority, category, and title search.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      status:
        name: status
        description: 'Filter tasks by status (pending, in_progress, completed).'
        required: false
        example: pending
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      priority:
        name: priority
        description: 'Filter tasks by priority (low, medium, high).'
        required: false
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      category_id:
        name: category_id
        description: 'Filter tasks by category ID.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      search:
        name: search
        description: 'Search tasks by title.'
        required: false
        example: Project
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'Page number for pagination.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      status: pending
      priority: high
      category_id: 1
      search: Project
      page: 1
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "Success",
            "message": null,
            "data": {
              "current_page": 1,
              "data": [
                {
                  "id": 1,
                  "user_id": 1,
                  "category_id": 1,
                  "title": "Complete project",
                  "description": "Finish the API implementation",
                  "due_date": "2023-12-31",
                  "status": "pending",
                  "priority": "high",
                  "image_path": null,
                  "created_at": "2023-01-01T00:00:00.000000Z",
                  "updated_at": "2023-01-01T00:00:00.000000Z",
                  "category": {
                    "id": 1,
                    "user_id": 1,
                    "name": "Work",
                    "color": "#ff0000",
                    "created_at": "2023-01-01T00:00:00.000000Z",
                    "updated_at": "2023-01-01T00:00:00.000000Z"
                  }
                }
              ],
              "first_page_url": "http://localhost/api/tasks?page=1",
              "from": 1,
              "last_page": 1,
              "last_page_url": "http://localhost/api/tasks?page=1",
              "links": [],
              "next_page_url": null,
              "path": "http://localhost/api/tasks",
              "per_page": 10,
              "prev_page_url": null,
              "to": 1,
              "total": 1
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": "Error",
            "message": "Unauthenticated.",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/tasks
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new task'
      description: 'Creates a new task for the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the task.'
        required: true
        example: 'Complete project'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The description of the task.'
        required: false
        example: 'Finish the API implementation'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      due_date:
        name: due_date
        description: 'The due date for the task.'
        required: false
        example: '2023-12-31'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      status:
        name: status
        description: 'The status of the task (pending, in_progress, completed).'
        required: false
        example: pending
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      priority:
        name: priority
        description: 'The priority of the task (low, medium, high).'
        required: false
        example: high
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      category_id:
        name: category_id
        description: 'The ID of the category for this task.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      title: 'Complete project'
      description: 'Finish the API implementation'
      due_date: '2023-12-31'
      status: pending
      priority: high
      category_id: 1
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "status": "Success",
            "message": "Task created successfully",
            "data": {
              "id": 1,
              "user_id": 1,
              "category_id": 1,
              "title": "Complete project",
              "description": "Finish the API implementation",
              "due_date": "2023-12-31",
              "status": "pending",
              "priority": "high",
              "image_path": null,
              "created_at": "2023-01-01T00:00:00.000000Z",
              "updated_at": "2023-01-01T00:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "status": "Error",
            "message": "Unauthenticated.",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": "Error",
            "message": "The title field is required.",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/tasks/{id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a specific task'
      description: 'Returns details for a specific task if it belongs to the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the task.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
      task: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "Success",
            "message": null,
            "data": {
              "id": 1,
              "user_id": 1,
              "category_id": 1,
              "title": "Complete project",
              "description": "Finish the API implementation",
              "due_date": "2023-12-31",
              "status": "pending",
              "priority": "high",
              "image_path": null,
              "created_at": "2023-01-01T00:00:00.000000Z",
              "updated_at": "2023-01-01T00:00:00.000000Z",
              "category": {
                "id": 1,
                "user_id": 1,
                "name": "Work",
                "color": "#ff0000",
                "created_at": "2023-01-01T00:00:00.000000Z",
                "updated_at": "2023-01-01T00:00:00.000000Z"
              }
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "status": "Error",
            "message": "Unauthorized",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "status": "Error",
            "message": "No query results for model [App\\Models\\Task] 1",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/v1/tasks/{id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a task'
      description: 'Updates the specified task if it belongs to the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the task.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
      task: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The title of the task.'
        required: false
        example: 'Updated project title'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The description of the task.'
        required: false
        example: 'Updated description'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      due_date:
        name: due_date
        description: 'The due date for the task.'
        required: false
        example: '2024-01-15'
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      status:
        name: status
        description: 'The status of the task (pending, in_progress, completed).'
        required: false
        example: in_progress
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      priority:
        name: priority
        description: 'The priority of the task (low, medium, high).'
        required: false
        example: medium
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      category_id:
        name: category_id
        description: 'The ID of the category for this task.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      title: 'Updated project title'
      description: 'Updated description'
      due_date: '2024-01-15'
      status: in_progress
      priority: medium
      category_id: 2
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "Success",
            "message": "Task updated successfully",
            "data": {
              "id": 1,
              "user_id": 1,
              "category_id": 2,
              "title": "Updated project title",
              "description": "Updated description",
              "due_date": "2024-01-15",
              "status": "in_progress",
              "priority": "medium",
              "image_path": null,
              "created_at": "2023-01-01T00:00:00.000000Z",
              "updated_at": "2023-01-01T00:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "status": "Error",
            "message": "Unauthorized",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "status": "Error",
            "message": "No query results for model [App\\Models\\Task] 1",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/tasks/{id}'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a task'
      description: 'Deletes the specified task if it belongs to the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the task.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 2
      task: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "status": "Success",
            "message": "Task deleted successfully",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "status": "Error",
            "message": "Unauthorized",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "status": "Error",
            "message": "No query results for model [App\\Models\\Task] 1",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/tasks/{task_id}/image'
    metadata:
      groupName: 'Task Management'
      groupDescription: |-

        APIs for managing tasks
      subgroup: ''
      subgroupDescription: ''
      title: 'Upload task image'
      description: 'Uploads an image for the specified task if it belongs to the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: multipart/form-data
      Accept: application/json
    urlParameters:
      task_id:
        name: task_id
        description: 'The ID of the task.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      task:
        name: task
        description: 'The ID of the task.'
        required: true
        example: '1'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      task_id: 2
      task: '1'
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      image:
        name: image
        description: 'The image file to upload (max 2MB, image file).'
        required: true
        example: null
        type: file
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters: []
    fileParameters:
      image: null
    responses:
      -
        status: 200
        content: |-
          {
            "status": "Success",
            "message": "Image uploaded successfully",
            "data": {
              "image_path": "task-images/abc123.jpg"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: |-
          {
            "status": "Error",
            "message": "Unauthorized",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: |-
          {
            "status": "Error",
            "message": "No query results for model [App\\Models\\Task] 1",
            "data": null
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "status": "Error",
            "message": "The image field is required.",
            "data": null
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
